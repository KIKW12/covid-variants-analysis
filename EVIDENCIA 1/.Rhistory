# Lee el archivo de ADN y cuenta las bases
ADN_set <- readDNAStringSet(variantes[i])
adn <- toString(ADN_set)
base_counts <- contar_bases(adn)
# Gráfico de barras para las bases de ADN
ggplot(base_counts, aes(x = Base, y = Count, fill = Base)) +
geom_bar(stat = "identity") +
labs(title = paste("Bases de ADN en", nombre_variantes[i]),
x = "Base", y = "Count") +
theme_minimal()
# Mostrar el gráfico
print(ggplot(base_counts, aes(x = Base, y = Count, fill = Base)) +
geom_bar(stat = "identity") +
labs(title = paste("Bases de ADN en", nombre_variantes[i]),
x = "Base", y = "Count") +
theme_minimal())
# Calcula y muestra el %GC
adn_info(adn)
# Genera la secuencia contrasentido, imprime los primeros elementos y almacénala en una variable
contrasentido <- generar_contrasentido(ADN_set, nombre_variantes[i])
}
# Cargar librerias
library(stringr)
library(Biostrings)
library(ggplot2)
# Define las variantes y sus nombres
variantes <- c("wuhan.fna", "ALPHA.fasta", "beta.fasta", "GAMMA.fasta", "Omnicron.fasta")
nombre_variantes <- c("Coronavirus", "Alpha", "Beta", "Gamma", "Omicron")
# Función para contar bases de ADN
contar_bases <- function(ADN) {
a_count <- str_count(ADN, pattern = "A")
t_count <- str_count(ADN, pattern = "T")
g_count <- str_count(ADN, pattern = "G")
c_count <- str_count(ADN, pattern = "C")
n_count <- str_count(ADN, pattern = "N")
data.frame(Base = c("A", "T", "G", "C", "N"), Count = c(a_count, t_count, g_count, c_count, n_count))
}
# Función para calcular %GC
adn_info <- function(ADN) {
adn_len <- nchar(ADN)
gc_count <- str_count(ADN, pattern = "G|C")
gc_percentage <- (gc_count / adn_len) * 100
cat("Tamaño de las bases:", adn_len, "\n")
cat("Porcentaje de GC:", gc_percentage, "%\n\n")
}
# Función para generar secuencia contrasentido e imprimir las primeras 20 letras
generar_contrasentido <- function(ADN_set, nombre_variante) {
contrasentido <- reverseComplement(ADN_set)
cat("Nombre de la variante:", nombre_variante, "\n")
cat("Primeras 20 letras de la secuencia contrasentido:\n", substr(contrasentido, 1, 20), "\n\n")
return(contrasentido)
}
# Main
for (i in 1:length(variantes)) {
# Imprime el nombre de la variante
cat("Nombre de la variante:", nombre_variantes[i], "\n")
# Lee el archivo de ADN y cuenta las bases
ADN_set <- readDNAStringSet(variantes[i])
adn <- toString(ADN_set)
base_counts <- contar_bases(adn)
# Gráfico de barras para las bases de ADN
ggplot(base_counts, aes(x = Base, y = Count, fill = Base)) +
geom_bar(stat = "identity") +
labs(title = paste("Bases de ADN en", nombre_variantes[i]),
x = "Base", y = "Count") +
theme_minimal()
# Mostrar el gráfico
print(ggplot(base_counts, aes(x = Base, y = Count, fill = Base)) +
geom_bar(stat = "identity") +
labs(title = paste("Bases de ADN en", nombre_variantes[i]),
x = "Base", y = "Count") +
theme_minimal())
# Calcula y muestra el %GC
adn_info(adn)
# Genera la secuencia contrasentido, imprime las primeras 20 letras y almacénala en una variable
contrasentido <- generar_contrasentido(ADN_set, nombre_variantes[i])
}
library(stringr)
library(Biostrings)
library(ggplot2)
variantes <- c("wuhan.fna", "ALPHA.fasta", "beta.fasta", "GAMMA.fasta", "Omnicron.fasta")
nombre_variantes <- c("Wuhan", "Alpha", "Beta", "Gamma", "Omicron")
contar_bases <- function(ADN) {
a_count <- str_count(ADN, pattern = "A")
t_count <- str_count(ADN, pattern = "T")
g_count <- str_count(ADN, pattern = "G")
c_count <- str_count(ADN, pattern = "C")
n_count <- str_count(ADN, pattern = "N")
data.frame(Base = c("A", "T", "G", "C", "N"), Count = c(a_count, t_count, g_count, c_count, n_count))
}
adn_info <- function(ADN) {
adn_len <- nchar(ADN)
gc_count <- str_count(ADN, pattern = "G|C")
gc_percentage <- (gc_count / adn_len) * 100
cat("Tamaño de las bases:", adn_len, "\n")
cat("Porcentaje de GC:", gc_percentage, "%\n\n")
}
generar_contrasentido <- function(ADN_set) {
contrasentido <- reverseComplement(ADN_set)
return(contrasentido)
}
# Main
for (i in 1:length(variantes)) {
# Imprime el nombre de la variante
cat("Nombre de la variante:", nombre_variantes[i], "\n")
# Lee el archivo de ADN y cuenta las bases
ADN_set <- readDNAStringSet(variantes[i])
adn <- toString(ADN_set)
base_counts <- contar_bases(adn)
# Gráfico de barras para las bases de ADN
ggplot(base_counts, aes(x = Base, y = Count, fill = Base)) +
geom_bar(stat = "identity") +
labs(title = paste("Cantidad de bases nitrogenadas de", nombre_variantes[i]),
x = "Base Nitrogenada", y = "Count") +
theme_minimal()
# Mostrar el gráfico
print(ggplot(base_counts, aes(x = Base, y = Count, fill = Base)) +
geom_bar(stat = "identity") +
labs(title = paste("Cantidad de bases nitrogenadas de", nombre_variantes[i]),
x = "Base Nitrogenada", y = "Count") +
theme_minimal())
# Calcula y muestra el %GC
adn_info(adn)
# Genera la secuencia contrasentido y almacénala en una variable
contrasentido <- generar_contrasentido(ADN_set)
}
# Cargar librerias
library(stringr)
library(Biostrings)
library(ggplot2)
# Define las variantes y sus nombres
variantes <- c("wuhan.fna", "ALPHA.fasta", "beta.fasta", "GAMMA.fasta", "Omnicron.fasta")
nombre_variantes <- c("Coronavirus", "Alpha", "Beta", "Gamma", "Omicron")
# Función para contar bases de ADN
contar_bases <- function(ADN) {
a_count <- str_count(ADN, pattern = "A")
t_count <- str_count(ADN, pattern = "T")
g_count <- str_count(ADN, pattern = "G")
c_count <- str_count(ADN, pattern = "C")
n_count <- str_count(ADN, pattern = "N")
data.frame(Base = c("A", "T", "G", "C", "N"), Count = c(a_count, t_count, g_count, c_count, n_count))
}
# Función para calcular %GC
adn_info <- function(ADN) {
adn_len <- nchar(ADN)
gc_count <- str_count(ADN, pattern = "G|C")
gc_percentage <- (gc_count / adn_len) * 100
cat("Tamaño de las bases:", adn_len, "\n")
cat("Porcentaje de GC:", gc_percentage, "%\n\n")
}
# Función para invertir una cadena de ADN
invertir_cadena_ADN <- function(ADN) {
reversed_ADN <- Biostrings::reverseComplement(DNAString(ADN))
return(as.character(reversed_ADN))
}
# Main
for (i in 1:length(variantes)) {
# Imprime el nombre de la variante
cat("Nombre de la variante:", nombre_variantes[i], "\n")
# Lee el archivo de ADN y cuenta las bases
ADN_set <- readDNAStringSet(variantes[i])
adn <- toString(ADN_set)
base_counts <- contar_bases(adn)
# Gráfico de barras para las bases de ADN
ggplot(base_counts, aes(x = Base, y = Count, fill = Base)) +
geom_bar(stat = "identity") +
labs(title = paste("Bases de ADN en", nombre_variantes[i]),
x = "Base", y = "Count") +
theme_minimal()
# Mostrar el gráfico
print(ggplot(base_counts, aes(x = Base, y = Count, fill = Base)) +
geom_bar(stat = "identity") +
labs(title = paste("Bases de ADN en", nombre_variantes[i]),
x = "Base", y = "Count") +
theme_minimal())
# Calcula y muestra el %GC
adn_info(adn)
# Invierte cada cadena de ADN y muestra los resultados
for (j in 1:length(ADN_set)) {
inverted_ADN <- invertir_cadena_ADN(as.character(ADN_set[j]))
cat("Cadena de ADN invertida:", inverted_ADN, "\n")
}
}
# Cargar librerias
library(stringr)
library(Biostrings)
library(ggplot2)
# Define las variantes y sus nombres
variantes <- c("wuhan.fna", "ALPHA.fasta", "beta.fasta", "GAMMA.fasta", "Omnicron.fasta")
nombre_variantes <- c("Coronavirus", "Alpha", "Beta", "Gamma", "Omicron")
# Función para contar bases de ADN
contar_bases <- function(ADN) {
a_count <- str_count(ADN, pattern = "A")
t_count <- str_count(ADN, pattern = "T")
g_count <- str_count(ADN, pattern = "G")
c_count <- str_count(ADN, pattern = "C")
n_count <- str_count(ADN, pattern = "N")
data.frame(Base = c("A", "T", "G", "C", "N"), Count = c(a_count, t_count, g_count, c_count, n_count))
}
# Función para calcular %GC
adn_info <- function(ADN) {
adn_len <- nchar(ADN)
gc_count <- str_count(ADN, pattern = "G|C")
gc_percentage <- (gc_count / adn_len) * 100
cat("Tamaño de las bases:", adn_len, "\n")
cat("Porcentaje de GC:", gc_percentage, "%\n\n")
}
# Función para invertir una cadena de ADN
invertir_cadena_ADN <- function(ADN) {
reversed_ADN <- Biostrings::reverseComplement(DNAString(ADN))
return(substr(as.character(reversed_ADN), 1, 50))  # Limitar a los primeros 50 caracteres
}
# Main
for (i in 1:length(variantes)) {
# Imprime el nombre de la variante
cat("Nombre de la variante:", nombre_variantes[i], "\n")
# Lee el archivo de ADN y cuenta las bases
ADN_set <- readDNAStringSet(variantes[i])
adn <- toString(ADN_set)
base_counts <- contar_bases(adn)
# Gráfico de barras para las bases de ADN
ggplot(base_counts, aes(x = Base, y = Count, fill = Base)) +
geom_bar(stat = "identity") +
labs(title = paste("Bases de ADN en", nombre_variantes[i]),
x = "Base", y = "Count") +
theme_minimal()
# Mostrar el gráfico
print(ggplot(base_counts, aes(x = Base, y = Count, fill = Base)) +
geom_bar(stat = "identity") +
labs(title = paste("Bases de ADN en", nombre_variantes[i]),
x = "Base", y = "Count") +
theme_minimal())
# Calcula y muestra el %GC
adn_info(adn)
# Invierte cada cadena de ADN y muestra los primeros 50 caracteres
for (j in 1:length(ADN_set)) {
inverted_ADN <- invertir_cadena_ADN(as.character(ADN_set[j]))
cat("Cadena de ADN invertida (primeros 50 caracteres):", inverted_ADN, "\n")
}
}
library(stringr)
library(Biostrings)
library(ggplot2)
variantes <- c("wuhan.fna", "ALPHA.fasta", "beta.fasta", "GAMMA.fasta", "Omnicron.fasta")
nombre_variantes <- c("Wuhan", "Alpha", "Beta", "Gamma", "Omicron")
contar_bases <- function(ADN) {
a_count <- str_count(ADN, pattern = "A")
t_count <- str_count(ADN, pattern = "T")
g_count <- str_count(ADN, pattern = "G")
c_count <- str_count(ADN, pattern = "C")
n_count <- str_count(ADN, pattern = "N")
data.frame(Base = c("A", "T", "G", "C", "N"), Count = c(a_count, t_count, g_count, c_count, n_count))
}
adn_info <- function(ADN) {
adn_len <- nchar(ADN)
gc_count <- str_count(ADN, pattern = "G|C")
gc_percentage <- (gc_count / adn_len) * 100
cat("Tamaño de las bases:", adn_len, "\n")
cat("Porcentaje de GC:", gc_percentage, "%\n\n")
}
generar_contrasentido <- function(ADN_set) {
contrasentido <- reverseComplement(ADN_set)
return(contrasentido)
}
# Main
for (i in 1:length(variantes)) {
# Imprime el nombre de la variante
cat("Nombre de la variante:", nombre_variantes[i], "\n")
# Lee el archivo de ADN y cuenta las bases
ADN_set <- readDNAStringSet(variantes[i])
adn <- toString(ADN_set)
base_counts <- contar_bases(adn)
# Gráfico de barras para las bases de ADN
ggplot(base_counts, aes(x = Base, y = Count, fill = Base)) +
geom_bar(stat = "identity") +
labs(title = paste("Cantidad de bases nitrogenadas de", nombre_variantes[i]),
x = "Base Nitrogenada", y = "Count") +
theme_minimal()
# Mostrar el gráfico
print(ggplot(base_counts, aes(x = Base, y = Count, fill = Base)) +
geom_bar(stat = "identity") +
labs(title = paste("Cantidad de bases nitrogenadas de", nombre_variantes[i]),
x = "Base Nitrogenada", y = "Count") +
theme_minimal())
# Calcula y muestra el %GC
adn_info(adn)
# Genera la secuencia contrasentido y almacénala en una variable
contrasentido <- generar_contrasentido(ADN_set)
}
# Cargar librerias
library(stringr)
library(Biostrings)
library(ggplot2)
# Define las variantes y sus nombres
variantes <- c("wuhan.fna", "ALPHA.fasta", "beta.fasta", "GAMMA.fasta", "Omnicron.fasta")
nombre_variantes <- c("Coronavirus", "Alpha", "Beta", "Gamma", "Omicron")
# Función para contar bases de ADN
contar_bases <- function(ADN) {
a_count <- str_count(ADN, pattern = "A")
t_count <- str_count(ADN, pattern = "T")
g_count <- str_count(ADN, pattern = "G")
c_count <- str_count(ADN, pattern = "C")
n_count <- str_count(ADN, pattern = "N")
data.frame(Base = c("A", "T", "G", "C", "N"), Count = c(a_count, t_count, g_count, c_count, n_count))
}
# Función para calcular %GC
adn_info <- function(ADN) {
adn_len <- nchar(ADN)
gc_count <- str_count(ADN, pattern = "G|C")
gc_percentage <- (gc_count / adn_len) * 100
cat("Tamaño de las bases:", adn_len, "\n")
cat("Porcentaje de GC:", gc_percentage, "%\n\n")
}
# Main
for (i in 1:length(variantes)) {
# Imprime el nombre de la variante
cat("Nombre de la variante:", nombre_variantes[i], "\n")
# Lee el archivo de ADN y cuenta las bases
ADN_set <- readDNAStringSet(variantes[i])
adn <- toString(ADN_set)
base_counts <- contar_bases(adn)
# Gráfico de barras para las bases de ADN
ggplot(base_counts, aes(x = Base, y = Count, fill = Base)) +
geom_bar(stat = "identity") +
labs(title = paste("Bases de ADN en", nombre_variantes[i]),
x = "Base", y = "Count") +
theme_minimal()
# Mostrar el gráfico
print(ggplot(base_counts, aes(x = Base, y = Count, fill = Base)) +
geom_bar(stat = "identity") +
labs(title = paste("Bases de ADN en", nombre_variantes[i]),
x = "Base", y = "Count") +
theme_minimal())
# Calcula y muestra el %GC
adn_info(adn)
}
# Cargar librerias
library(stringr)
library(Biostrings)
library(ggplot2)
# Define las variantes y sus nombres
variantes <- c("wuhan.fna", "ALPHA.fasta", "beta.fasta", "GAMMA.fasta", "Omnicron.fasta")
nombre_variantes <- c("Coronavirus", "Alpha", "Beta", "Gamma", "Omicron")
# Función para contar bases de ADN
contar_bases <- function(ADN) {
a_count <- str_count(ADN, pattern = "A")
t_count <- str_count(ADN, pattern = "T")
g_count <- str_count(ADN, pattern = "G")
c_count <- str_count(ADN, pattern = "C")
n_count <- str_count(ADN, pattern = "N")
data.frame(Base = c("A", "T", "G", "C", "N"), Count = c(a_count, t_count, g_count, c_count, n_count))
}
# Función para calcular %GC
adn_info <- function(ADN) {
adn_len <- nchar(ADN)
gc_count <- str_count(ADN, pattern = "G|C")
gc_percentage <- (gc_count / adn_len) * 100
cat("Tamaño de las bases:", adn_len, "\n")
cat("Porcentaje de GC:", gc_percentage, "%\n\n")
}
# Crear una lista para almacenar los datos y nombres de las variantes
datos <- list()
nombres <- list()
# Main
for (i in 1:length(variantes)) {
# Imprime el nombre de la variante
cat("Nombre de la variante:", nombre_variantes[i], "\n")
# Lee el archivo de ADN y cuenta las bases
ADN_set <- readDNAStringSet(variantes[i])
adn <- toString(ADN_set)
base_counts <- contar_bases(adn)
# Agregar datos y nombres a las listas
datos[[i]] <- base_counts
nombres[[i]] <- nombre_variantes[i]
}
# Combinar datos en un único dataframe
datos_combinados <- do.call(rbind, datos)
# Crear el gráfico combinado
ggplot(datos_combinados, aes(x = Base, y = Count, fill = Base)) +
geom_bar(stat = "identity") +
facet_wrap(~Var1, scales = "free_y") +
labs(title = "Bases de ADN en diferentes variantes",
x = "Base", y = "Count") +
theme_minimal()
# Cargar librerias
library(stringr)
library(Biostrings)
library(ggplot2)
# Define las variantes y sus nombres
variantes <- c("wuhan.fna", "ALPHA.fasta", "beta.fasta", "GAMMA.fasta", "Omnicron.fasta")
nombre_variantes <- c("Coronavirus", "Alpha", "Beta", "Gamma", "Omicron")
# Función para contar bases de ADN
contar_bases <- function(ADN) {
a_count <- str_count(ADN, pattern = "A")
t_count <- str_count(ADN, pattern = "T")
g_count <- str_count(ADN, pattern = "G")
c_count <- str_count(ADN, pattern = "C")
n_count <- str_count(ADN, pattern = "N")
data.frame(Base = c("A", "T", "G", "C", "N"), Count = c(a_count, t_count, g_count, c_count, n_count))
}
# Función para calcular %GC
adn_info <- function(ADN) {
adn_len <- nchar(ADN)
gc_count <- str_count(ADN, pattern = "G|C")
gc_percentage <- (gc_count / adn_len) * 100
cat("Tamaño de las bases:", adn_len, "\n")
cat("Porcentaje de GC:", gc_percentage, "%\n\n")
}
# Main
for (i in 1:length(variantes)) {
# Imprime el nombre de la variante
cat("Nombre de la variante:", nombre_variantes[i], "\n")
# Lee el archivo de ADN y cuenta las bases
ADN_set <- readDNAStringSet(variantes[i])
adn <- toString(ADN_set)
base_counts <- contar_bases(adn)
# Gráfico de barras para las bases de ADN
ggplot(base_counts, aes(x = Base, y = Count, fill = Base)) +
geom_bar(stat = "identity") +
labs(title = paste("Bases de ADN en", nombre_variantes[i]),
x = "Base", y = "Count") +
theme_minimal()
# Mostrar el gráfico
print(ggplot(base_counts, aes(x = Base, y = Count, fill = Base)) +
geom_bar(stat = "identity") +
labs(title = paste("Bases de ADN en", nombre_variantes[i]),
x = "Base", y = "Count") +
theme_minimal())
# Calcula y muestra el %GC
adn_info(adn)
}
# Cargar librerias
library(stringr)
library(Biostrings)
library(ggplot2)
library(tidyr)
# Cargar librerias
library(stringr)
library(Biostrings)
library(ggplot2)
# Define las variantes y sus nombres
variantes <- c("wuhan.fna", "ALPHA.fasta", "beta.fasta", "GAMMA.fasta", "Omnicron.fasta")
nombre_variantes <- c("Coronavirus", "Alpha", "Beta", "Gamma", "Omicron")
# Función para contar bases de ADN
contar_bases <- function(ADN) {
a_count <- str_count(ADN, pattern = "A")
t_count <- str_count(ADN, pattern = "T")
g_count <- str_count(ADN, pattern = "G")
c_count <- str_count(ADN, pattern = "C")
n_count <- str_count(ADN, pattern = "N")
data.frame(Base = c("A", "T", "G", "C", "N"), Count = c(a_count, t_count, g_count, c_count, n_count))
}
# Crear una lista para almacenar los datos y nombres de las variantes
datos <- list()
nombres <- list()
# Main
for (i in 1:length(variantes)) {
# Imprime el nombre de la variante
cat("Nombre de la variante:", nombre_variantes[i], "\n")
# Lee el archivo de ADN y cuenta las bases
ADN_set <- readDNAStringSet(variantes[i])
adn <- toString(ADN_set)
base_counts <- contar_bases(adn)
# Agregar datos y nombres a las listas
datos[[i]] <- base_counts
nombres[[i]] <- nombre_variantes[i]
}
# Combinar datos en un único dataframe
datos_combinados <- do.call(rbind, datos)
# Añadir información de la variante
datos_combinados$Variante <- rep(nombre_variantes, each = 5)
# Crear el gráfico combinado
ggplot(datos_combinados, aes(x = Base, y = Count, fill = Base)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~Variante, scales = "free_y") +
labs(title = "Bases de ADN en diferentes variantes",
x = "Base", y = "Count") +
theme_minimal()
# Cargar librerias
library(stringr)
library(Biostrings)
library(ggplot2)
library(ape)
library(ade4)
# Función para contar bases de ADN
contar_bases <- function(ADN) {
a_count <- str_count(ADN, pattern = "A")
t_count <- str_count(ADN, pattern = "T")
g_count <- str_count(ADN, pattern = "G")
c_count <- str_count(ADN, pattern = "C")
n_count <- str_count(ADN, pattern = "N")
data.frame(Base = c("A", "T", "G", "C", "N"), Count = c(a_count, t_count, g_count, c_count, n_count))
}
# Leer el archivo de secuencias de ADN
dna <- fasta2DNAbin(file = "usflu.fasta")
# Cargar librerias
library(stringr)
library(Biostrings)
library(ggplot2)
library(ape)
library(ade4)
# Función para contar bases de ADN
contar_bases <- function(ADN) {
a_count <- str_count(ADN, pattern = "A")
t_count <- str_count(ADN, pattern = "T")
g_count <- str_count(ADN, pattern = "G")
c_count <- str_count(ADN, pattern = "C")
n_count <- str_count(ADN, pattern = "N")
data.frame(Base = c("A", "T", "G", "C", "N"), Count = c(a_count, t_count, g_count, c_count, n_count))
}
# Leer el archivo de secuencias de ADN
dna <- fasta2DNAbin(file = "usflu.fasta")
